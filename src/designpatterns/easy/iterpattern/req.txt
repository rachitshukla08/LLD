Software which displays list of flight no from a particular airport
There are 3rd party airlines and each airline have flight numbers which are stored in a data structure
Write program to retrieve and display data
Air india: Binary search tree. getData() returns list<TreeNode>
Indigo: Linkedlist. getData() returns LinkedListNode[]
Vistara: List<Integer>. getData() returns List<Integer>

Write an application that talks to getData method of these airlines and fetches the list and one
by one iterates on it and renders the flight no on display board


Why we need this pattern?

Different data structures have different getData() return values so it is not possible to directly
iterate by just doing getData() and then iterating on it in main class. Even if to iterate I write an interface
that fixes the return type of getData to int[] then in the display() method in main, I need to write
the display logic. This responsibility should be at client side that when he needs to iterate and at what
point he wants to stop iterating. The control should be at client side.

Why we need both the interfaces and not just iterator (Iterable and Iterator 2 interfaces)

Suppose I directly write the iteration logic in each data structure by implementing data structure
classes directly against Iterator
-Then my classes will become bulky due to iteration logic directly placed inside them
-Suppose there are multiple types of iterations for the data structure then I cannot accommodate them
eg: Inorder, Postorder

So if I code them against an iterable then I can return any type of iterator for any data structure that
I want.